#-----------------------recap: python containers------------------------
#Any object which stores data is called a container
#Lists are an ordered group of elements. Elements can be added, removed, accessed, and modified.
#Tuples are immutable objects which group multiple elements together. They are similar to lists, except that they cannot be modified once created.
#Dictionaries are unordered groups of key-value pairs.
#Sets are unordered groups of elements that cannot contain duplicates, elements cannot be modified.

  # Write your code below!
company_name = "Il-Ħwejjeġ"
company_location = (35.896023, 14.484886)
company_products = ["għonnella", "ċuqlana", "geżwira", "ħorġa", "terħa"]
company_data = {'name': company_name, 'location': company_location, 'products': company_products}

#-----------------------introduction to specialized containers------------------------

#-----------------------deque------------------------

#These are similar to lists, but they are optimized for appending and popping to the front and back, rather than having optimized accessing. 
#Because of this, they are great for working with data where you don’t need to access elements in the middle very often or at all.

from helper_functions import process_csv_supplies
from collections import deque

# The first row is skipped since it only contains labels
csv_data = process_csv_supplies()[1:]

# Here is a sample of 2 elements in csv_data:
# [ ['nylon', '10', 'unimportant'], ['wool', '1', 'important'] ]

# Write your code below!
supplies_deque = deque()
for row in csv_data:
    if row[2] == 'important':
        supplies_deque.appendleft(tuple(row))
    else:
        supplies_deque.append(tuple(row))

ordered_important_supplies = deque()
for _ in range(25):
    ordered_important_supplies.append(supplies_deque.popleft())

ordered_unimportant_supplies = deque()
for _ in range(10):
  ordered_unimportant_supplies.append(supplies_deque.pop())

#-----------------------named tuple------------------------

#The namedtuple collection allows us to have an immutable tuple object, but every element becomes self-documented. 

clothes = [('t-shirt', 'green', 'large', 9.99),
           ('jeans', 'blue', 'medium', 14.99),
           ('jacket', 'black', 'x-large', 19.99),
           ('t-shirt', 'grey', 'small', 8.99),
           ('shoes', 'white', '12', 24.99),
           ('t-shirt', 'grey', 'small', 8.99)]

# Write your code below!
from collections import namedtuple

ClothingItem = namedtuple("ClothingItem", ["type", "color", "size", "price"])

new_coat = ClothingItem("coat", "black", "small", 14.99)

coat_cost = new_coat.price

updated_clothes_data = []

for item in clothes:
  updated_clothes_data.append(ClothingItem(item[0], item[1], item[2], item[3]))
print(updated_clothes_data)

#-----------------------DefaultDict------------------------

#Dealing with frequent KeyError exceptions can be quite cumbersome and in certain cases, it might be better to avoid throwing an error. 
#One of the ways Python offers to deal with this issue is by having a default missing value in the dictionary, and this is exactly what the defaultdict collection does.


site_locations = {'t-shirt': 'Shirts',
                  'dress shirt': 'Shirts',
                  'flannel shirt': 'Shirts',
                  'sweatshirt': 'Shirts',
                  'jeans': 'Pants',
                  'dress pants': 'Pants',
                  'cropped pants': 'Pants',
                  'leggings': 'Pants'
                  }
updated_products = ['draped blouse', 'leggings', 'undershirt', 'dress shirt', 'jeans', 'sun dress', 'flannel shirt', 'cropped pants', 'dress pants', 't-shirt', 'camisole top', 'sweatshirt']

# Write your code below!
from collections import defaultdict

validated_locations = defaultdict(lambda: 'TODO: Add to website')

validated_locations.update(site_locations)

for item in updated_products:
  site_locations[item] = validated_locations[item]

print(site_locations)

#-----------------------OrderedDict------------------------

#The OrderedDict container allows us to access values using keys, but it also preserves the order of the elements inside of it. 

from collections import OrderedDict

# The first 15 orders are provided
order_data = [['Order: 1', 'purchased'],
              ['Order: 2', 'purchased'],
              ['Order: 3', 'purchased'],
              ['Order: 4', 'returned'],
              ['Order: 5', 'purchased'],
              ['Order: 6', 'canceled'],
              ['Order: 7', 'returned'],
              ['Order: 8', 'purchased'],
              ['Order: 9', 'returned'],
              ['Order: 10', 'canceled'],
              ['Order: 11', 'purchased'],
              ['Order: 12', 'returned'],
              ['Order: 13', 'purchased'],
              ['Order: 14', 'canceled'],
              ['Order: 15', 'purchased']]

# Write your code below!
orders = OrderedDict(order_data)

to_move = []
to_remove = []

for order, status in orders.items():
  if status == "returned":
    to_move.append(order)
  elif status == "canceled":
    to_remove.append(order)

for order in to_remove:
  orders.pop(order)

for order in to_move:
  orders.move_to_end(order)

print(orders)

#-----------------------ChainMap------------------------
#When accessing data, one way to think of the ChainMap is that it treats all of the stored dictionaries as one large dictionary, 
#where if there are repeated keys, then the first found result is returned.


year_profit_data = [
    {'jan_profit': 15492.30, 'jan_holiday_profit': 2589.12},
    {'feb_profit': 17018.05, 'feb_holiday_profit': 3701.88},
    {'mar_profit': 11849.13},
    {'apr_profit': 9870.68},
    {'may_profit': 13662.34},
    {'jun_profit': 12903.54},
    {'jul_profit': 16965.08, 'jul_holiday_profit': 4360.21},
    {'aug_profit': 17685.69},
    {'sep_profit': 9815.57},
    {'oct_profit': 10318.28},
    {'nov_profit': 23295.43, 'nov_holiday_profit': 9896.55},
    {'dec_profit': 21920.19, 'dec_holiday_profit': 8060.79}
]

new_months_data = [
    {'jan_profit': 13977.85, 'jan_holiday_profit': 2176.43},
    {'feb_profit': 16692.15, 'feb_holiday_profit': 3239.74},
    {'mar_profit': 17524.35, 'mar_holiday_profit': 4301.92}
]

# Write your code below!
from collections import ChainMap

profit_map = ChainMap(*year_profit_data)

def get_profits(input_map):
  total_standard_profit = 0.0
  total_holiday_profit = 0.0
  for key in input_map.keys():
    if "holiday" in key:
      total_holiday_profit += input_map[key]
    else:
      total_standard_profit += input_map[key]
  return total_standard_profit, total_holiday_profit

last_year_standard_profit, last_year_holiday_profit = get_profits(profit_map)

for item in new_months_data:
    profit_map = profit_map.new_child(item)

current_year_standard_profit, current_year_holiday_profit = get_profits(profit_map)

year_diff_standard_profit = current_year_standard_profit - last_year_standard_profit
year_diff_holiday_profit = current_year_holiday_profit - last_year_holiday_profit

print(year_diff_standard_profit, year_diff_holiday_profit)

#-----------------------counter------------------------

#The Counter container instantly counts elements for any hashable object. 
#It stores the data as a dictionary where the keys are the elements and the values are the number of occurrences.


opening_inventory = ['shoes', 'shoes', 'skirt', 'jeans', 'blouse', 'shoes', 't-shirt', 'dress', 'jeans', 'blouse', 'skirt', 'skirt', 'shorts', 'jeans', 'dress', 't-shirt', 'dress', 'blouse', 't-shirt', 'dress', 'dress', 'dress', 'jeans', 'dress', 'blouse']

closing_inventory = ['shoes', 'skirt', 'jeans', 'blouse', 'dress', 'skirt', 'shorts', 'jeans', 'dress', 'dress', 'jeans', 'dress', 'blouse']

# Write your code below!
from collections import Counter

def find_amount_sold(opening, closing, item):
  opening_count = Counter(opening)
  closing_count = Counter(closing)
  opening_count.subtract(closing_count)
  return opening_count[item]

tshirts_sold = find_amount_sold(opening_inventory, closing_inventory, "t-shirt")
print(tshirts_sold)

#-----------------------container wrappers------------------------

class Customer:
 
  def __init__(self, name, age, address, phone_number):
    self.name = name
    self.age = age
    self.address = address
    self.phone_number = phone_number


class CustomerWrap(Customer):
 
  def __init__(self, name, age, address, phone_number):
    self.customer = Customer(name, age, address, phone_number)
 
  def display_customer_info(self):
    print('Name: ' + self.customer.name)
    print('Age: ' + str(self.customer.age))
    print('Address: ' + self.customer.address)
    print('Phone Number: ' + self.customer.phone_number)


customer = CustomerWrap('Dmitri Buyer', 38, '123 Python Avenue', '5557098603')
customer.display_customer_info()

#-----------------------UserDict------------------------

data = {'order_4829': {'type': 't-shirt', 'size': 'large', 'price': 9.99, 'order_status': 'processing'},
        'order_6184': {'type': 'pants', 'size': 'medium', 'price': 14.99, 'order_status': 'complete'},
        'order_2905': {'type': 'shoes', 'size': 12, 'price': 22.50, 'order_status': 'complete'},
        'order_7378': {'type': 'jacket', 'size': 'large', 'price': 24.99, 'order_status': 'processing'}}

# Write your code below!
from collections import UserDict

class OrderProcessingDict(UserDict):
  def clean_orders(self):
    to_del = []
    for key, val in self.data.items():
      if val['order_status'] == 'complete':
                to_del.append(key)
    for item in to_del:
      del self.data[item]

process_dict = OrderProcessingDict(data)
process_dict.clean_orders()
print(process_dict)

#-----------------------UserList------------------------

data = [4, 6, 8, 9, 5, 7, 3, 1, 0]

# Write your code below!
from collections import UserList

class ListSorter(UserList):
  def append(self, item):
    self.data.append(item)
    self.data.sort()
sorted_list = ListSorter(data)
sorted_list.append(2)
print(sorted_list)

#-----------------------UserString------------------------

str_name = 'python powered patterned products'
str_word = 'patterned '

# Write your code below!
from collections import UserString

class SubtractString(UserString):
  def __sub__(self, other):
    if other in self.data:
      self.data = self.data.replace(other, '')
subtract_string = SubtractString(str_name)
subtract_string - str_word
print(subtract_string)

#-----------------------review------------------------

