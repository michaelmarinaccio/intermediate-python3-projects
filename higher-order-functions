#higher-order functions do one or both of the following: Accept a function as an argument and/orHave a return value that is a function

#---------------Functions as Arguments----------------------------------------

#example:
def total_bill(func, value):
  total = func(value)
  return total

def add_tax(total):
  tax = total * 0.06
  new_total = total + tax
  return new_total
 
total_bill(add_tax, 100)

#or

def add_tip(total):
  tip = total * .2
  new_total = total + tip
  return new_total

total_bill(add_tip, 100)

#---------------Functions as Arguments - Iteration--------------------------

#example:
def total_bills(func, list):
  # This list will store all the new bill values
  new_bills = []

  # This loop will iterate through our bills
  for i in range(len(list)):

    # Here we apply the function to each element of the list!
    total = func(list[i])
    new_bills.append("Total amount owed is $" + "{:.2f}".format(total) + ". Thank you! :)")

  return new_bills

bills = [115, 120, 42]
bills_w_tax = total_bills(add_tax, bills)
print(bills_w_tax)

#or

bills = [115, 120, 42]
bills_w_tip = total_bills(add_tip, bills)
print(bills_w_tip)

#---------------Functions as Return Values-------------------------------

#example
def make_box_volume_function(height):
    # defines and returns a function that takes two numeric arguments,        
    # length &  width, and returns the volume given the input height
    def volume(length, width):
        return length*width*height

    return volume
 
box_volume_height15 = make_box_volume_function(15)
 
print(box_volume_height15(3,2))

