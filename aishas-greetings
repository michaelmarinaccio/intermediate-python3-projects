# Write your code below: 
from contextlib import contextmanager

@contextmanager
def generic(card_type, sender_name, recipient):
  card_file = open(card_type, "r")
  order = open(f"{sender_name}_generic.txt", "w")
  try:
    order.write(f"Dear {recipient}, \n")
    order.write(card_file.read())
    order.write(f"\nSincerely, {sender_name} \n")
    yield order
  finally:
    card_file.close()
    order.close()
  
with generic("thankyou_card.txt", "Mwenda", "Amanda") as card:
  print('Card Generated! \n')

with open("Mwenda_generic.txt", "r") as first_card:
  print(first_card.read())

class personalized:
  def __init__(self, senders_name, recipients_name):
    self.senders_name = senders_name
    self.recipients_name = recipients_name
    self.open_file = open(f"{senders_name}_personalized.txt", "w")
    
  def __enter__(self):
    self.open_file.write(f"Dear {self.recipients_name}, \n")
    return self.open_file
  
  def __exit__(self, exc_type, exc_value, Traceback):
    self.open_file.write(f"\n Sincerely {self.senders_name}")
    return self.open_file.close()
  
with personalized("John", "Michael") as card:
  card.write("I am so proud of you! Being your friend for all these years has been nothing but a blessing. I don't say it often but I just wanted to let you know that you inspire me and I love you! All the best. Always.")
with generic("happy_bday.txt", "Josiah", "Remy") as card2, personalized("Josiah", "Esther") as card3:
    card3.write("Happy Birthday!! I love you to the moon and back. Even though you’re a pain sometimes, you’re a pain I can't live without. I am incredibly proud of you and grateful to have you as a sister. Cheers to 25!! You’re getting old!")
